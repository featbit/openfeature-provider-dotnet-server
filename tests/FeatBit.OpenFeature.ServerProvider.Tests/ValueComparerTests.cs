using System.Collections.Immutable;
using OpenFeature.Model;
using Xunit;

namespace FeatBit.OpenFeature.ServerProvider.Tests;

// This code is generated by GitHub Copilot
public class ValueComparerTests
{
    private readonly ValueComparer _comparer = new ValueComparer();

    [Fact]
    public void Equals_BothNull_ReturnsTrue()
    {
        Assert.True(_comparer.Equals(null, null));
    }

    [Fact]
    public void Equals_BothEmpty_ReturnsTrue()
    {
        Assert.True(_comparer.Equals(new Value(), new Value()));
    }

    [Fact]
    public void Equals_OneNull_ReturnsFalse()
    {
        var value = new Value("test");
        Assert.False(_comparer.Equals(value, null));
        Assert.False(_comparer.Equals(null, value));
    }

    [Fact]
    public void Equals_BothBoolean_ReturnsTrue()
    {
        var value1 = new Value(true);
        var value2 = new Value(true);
        Assert.True(_comparer.Equals(value1, value2));
    }

    [Fact]
    public void Equals_BothBoolean_ReturnsFalse()
    {
        var value1 = new Value(true);
        var value2 = new Value(false);
        Assert.False(_comparer.Equals(value1, value2));
    }

    [Fact]
    public void Equals_BothNumber_ReturnsTrue()
    {
        var value1 = new Value(1.0);
        var value2 = new Value(1.0);
        Assert.True(_comparer.Equals(value1, value2));
    }

    [Fact]
    public void Equals_BothNumber_ReturnsFalse()
    {
        var value1 = new Value(1.0);
        var value2 = new Value(2.0);
        Assert.False(_comparer.Equals(value1, value2));
    }

    [Fact]
    public void Equals_BothString_ReturnsTrue()
    {
        var value1 = new Value("test");
        var value2 = new Value("test");
        Assert.True(_comparer.Equals(value1, value2));
    }

    [Fact]
    public void Equals_BothString_ReturnsFalse()
    {
        var value1 = new Value("test1");
        var value2 = new Value("test2");
        Assert.False(_comparer.Equals(value1, value2));
    }

    [Fact]
    public void Equals_BothStructure_ReturnsTrue()
    {
        var structure1 = new Structure(new Dictionary<string, Value> { { "key", new Value("value") } });
        var structure2 = new Structure(new Dictionary<string, Value> { { "key", new Value("value") } });
        var value1 = new Value(structure1);
        var value2 = new Value(structure2);
        Assert.True(_comparer.Equals(value1, value2));
    }

    [Fact]
    public void Equals_BothStructure_ReturnsFalse()
    {
        var structure1 = new Structure(new Dictionary<string, Value> { { "key1", new Value("value1") } });
        var structure2 = new Structure(new Dictionary<string, Value> { { "key2", new Value("value2") } });
        var value1 = new Value(structure1);
        var value2 = new Value(structure2);
        Assert.False(_comparer.Equals(value1, value2));
    }

    [Fact]
    public void Equals_BothList_ReturnsTrue()
    {
        var list1 = ImmutableList.Create(new Value("item1"), new Value("item2"));
        var list2 = ImmutableList.Create(new Value("item1"), new Value("item2"));
        var value1 = new Value(list1);
        var value2 = new Value(list2);
        Assert.True(_comparer.Equals(value1, value2));
    }

    [Fact]
    public void Equals_BothList_ReturnsFalse()
    {
        var list1 = ImmutableList.Create(new Value("item1"), new Value("item2"));
        var list2 = ImmutableList.Create(new Value("item1"), new Value("item3"));
        var value1 = new Value(list1);
        var value2 = new Value(list2);
        Assert.False(_comparer.Equals(value1, value2));
    }

    [Fact]
    public void Equals_BothDateTime_ReturnsTrue()
    {
        var dateTime = DateTime.UtcNow;
        var value1 = new Value(dateTime);
        var value2 = new Value(dateTime);
        Assert.True(_comparer.Equals(value1, value2));
    }

    [Fact]
    public void Equals_BothDateTime_ReturnsFalse()
    {
        var value1 = new Value(DateTime.UtcNow);
        var value2 = new Value(DateTime.UtcNow.AddSeconds(1));
        Assert.False(_comparer.Equals(value1, value2));
    }
}