using System.Collections.Immutable;
using OpenFeature.Model;

namespace FeatBit.OpenFeature.ServerProvider.Tests;

// This code is generated by GitHub Copilot
internal class ValueComparer : IEqualityComparer<Value>
{
    public bool Equals(Value? x, Value? y)
    {
        if (ReferenceEquals(x, y)) return true;
        if (x is null || y is null) return false;

        if (x.IsNull && y.IsNull) return true;
        if (x.IsBoolean && y.IsBoolean) return x.AsBoolean == y.AsBoolean;
        if (x.IsNumber && y.IsNumber) return x.AsDouble == y.AsDouble;
        if (x.IsString && y.IsString) return x.AsString == y.AsString;
        if (x.IsStructure && y.IsStructure) return StructureEquals(x.AsStructure, y.AsStructure);
        if (x.IsList && y.IsList) return ListEquals(x.AsList, y.AsList);
        if (x.IsDateTime && y.IsDateTime) return x.AsDateTime == y.AsDateTime;

        return false;
    }

    public int GetHashCode(Value obj)
    {
        throw new NotImplementedException();
    }

    private bool StructureEquals(Structure? x, Structure? y)
    {
        if (x == null || y == null) return false;
        if (x.Count != y.Count) return false;

        foreach (var key in x.Keys)
        {
            if (!y.Keys.Contains(key)) return false;
            if (!Equals(x[key], y[key])) return false;
        }

        return true;
    }

    private bool ListEquals(IImmutableList<Value>? x, IImmutableList<Value>? y)
    {
        if (x == null || y == null) return false;
        if (x.Count != y.Count) return false;

        for (int i = 0; i < x.Count; i++)
        {
            if (!Equals(x[i], y[i])) return false;
        }

        return true;
    }
}